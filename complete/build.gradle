buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
        classpath "gradle.plugin.fi.evident.gradle.beanstalk:gradle-beanstalk-plugin:0.1.3"
    }
}

version "0.1"
group "myapp"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"fi.evident.beanstalk"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    //tag::dbDependency[]
    runtime 'mysql:mysql-connector-java'
    //end::dbDependency[]
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}

//tag::getEnv[]
tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
    systemProperty('RDS_DB_NAME', 'dbName')
    systemProperty('RDS_USERNAME', 'user')
    systemProperty('RDS_PASSWORD', 'pass')
    systemProperty('RDS_HOSTNAME', 'hostname')
    systemProperty('RDS_PORT', 'port')
}
//end::getEnv[]

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}


assets {
    minifyJs = true
    minifyCss = true
}

beanstalk {
    profile = 'my-profile' // Only required if using .aws/credentials
    s3Endpoint = "s3-us-east-2.amazonaws.com"
    beanstalkEndpoint = "elasticbeanstalk.us-east-2.amazonaws.com"

    deployments {
        // Example to deploy to the same env
        test {
            file = tasks.war
            application = 'MyCliApp'
            environment = 'MyCliAppTest'
        }
        // Example to create a new env for each version (to use URL swapping for blue/green deployment)
        production {
            file = tasks.war
            application = 'MyCliApp'
            environment = "MyCliApp-${project.version.replaceAll('\\.', '-')}"
            template = 'default' // Saved configuration name to use to create each env
        }
    }
}
